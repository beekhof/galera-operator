/*
Copyright 2018 The rss-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/beekhof/rss-operator/pkg/apis/galera/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ReplicatedStatefulSetLister helps list ReplicatedStatefulSets.
type ReplicatedStatefulSetLister interface {
	// List lists all ReplicatedStatefulSets in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStatefulSet, err error)
	// ReplicatedStatefulSets returns an object that can list and get ReplicatedStatefulSets.
	ReplicatedStatefulSets(namespace string) ReplicatedStatefulSetNamespaceLister
	ReplicatedStatefulSetListerExpansion
}

// replicatedStatefulSetLister implements the ReplicatedStatefulSetLister interface.
type replicatedStatefulSetLister struct {
	indexer cache.Indexer
}

// NewReplicatedStatefulSetLister returns a new ReplicatedStatefulSetLister.
func NewReplicatedStatefulSetLister(indexer cache.Indexer) ReplicatedStatefulSetLister {
	return &replicatedStatefulSetLister{indexer: indexer}
}

// List lists all ReplicatedStatefulSets in the indexer.
func (s *replicatedStatefulSetLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStatefulSet, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicatedStatefulSet))
	})
	return ret, err
}

// ReplicatedStatefulSets returns an object that can list and get ReplicatedStatefulSets.
func (s *replicatedStatefulSetLister) ReplicatedStatefulSets(namespace string) ReplicatedStatefulSetNamespaceLister {
	return replicatedStatefulSetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ReplicatedStatefulSetNamespaceLister helps list and get ReplicatedStatefulSets.
type ReplicatedStatefulSetNamespaceLister interface {
	// List lists all ReplicatedStatefulSets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStatefulSet, err error)
	// Get retrieves the ReplicatedStatefulSet from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.ReplicatedStatefulSet, error)
	ReplicatedStatefulSetNamespaceListerExpansion
}

// replicatedStatefulSetNamespaceLister implements the ReplicatedStatefulSetNamespaceLister
// interface.
type replicatedStatefulSetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ReplicatedStatefulSets in the indexer for a given namespace.
func (s replicatedStatefulSetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ReplicatedStatefulSet, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ReplicatedStatefulSet))
	})
	return ret, err
}

// Get retrieves the ReplicatedStatefulSet from the indexer for a given namespace and name.
func (s replicatedStatefulSetNamespaceLister) Get(name string) (*v1alpha1.ReplicatedStatefulSet, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("replicatedstatefulset"), name)
	}
	return obj.(*v1alpha1.ReplicatedStatefulSet), nil
}
