/*
Copyright 2017 The etcd-operator Authors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// This file was automatically generated by lister-gen

package v1alpha1

import (
	v1alpha1 "github.com/beekhof/galera-operator/pkg/apis/galera/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// GaleraClusterLister helps list GaleraClusters.
type GaleraClusterLister interface {
	// List lists all GaleraClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.GaleraCluster, err error)
	// GaleraClusters returns an object that can list and get GaleraClusters.
	GaleraClusters(namespace string) GaleraClusterNamespaceLister
	GaleraClusterListerExpansion
}

// galeraClusterLister implements the GaleraClusterLister interface.
type galeraClusterLister struct {
	indexer cache.Indexer
}

// NewGaleraClusterLister returns a new GaleraClusterLister.
func NewGaleraClusterLister(indexer cache.Indexer) GaleraClusterLister {
	return &galeraClusterLister{indexer: indexer}
}

// List lists all GaleraClusters in the indexer.
func (s *galeraClusterLister) List(selector labels.Selector) (ret []*v1alpha1.GaleraCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GaleraCluster))
	})
	return ret, err
}

// GaleraClusters returns an object that can list and get GaleraClusters.
func (s *galeraClusterLister) GaleraClusters(namespace string) GaleraClusterNamespaceLister {
	return galeraClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// GaleraClusterNamespaceLister helps list and get GaleraClusters.
type GaleraClusterNamespaceLister interface {
	// List lists all GaleraClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.GaleraCluster, err error)
	// Get retrieves the GaleraCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.GaleraCluster, error)
	GaleraClusterNamespaceListerExpansion
}

// galeraClusterNamespaceLister implements the GaleraClusterNamespaceLister
// interface.
type galeraClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all GaleraClusters in the indexer for a given namespace.
func (s galeraClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.GaleraCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.GaleraCluster))
	})
	return ret, err
}

// Get retrieves the GaleraCluster from the indexer for a given namespace and name.
func (s galeraClusterNamespaceLister) Get(name string) (*v1alpha1.GaleraCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("galeracluster"), name)
	}
	return obj.(*v1alpha1.GaleraCluster), nil
}
