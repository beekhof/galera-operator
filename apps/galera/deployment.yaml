apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: replicatedstatefulsets.clusterlabs.org
spec:
  group: clusterlabs.org
  names:
    kind: ReplicatedStatefulSet
    listKind: ReplicatedStatefulSetList
    plural: replicatedstatefulsets
    shortNames:
    - rss
    singular: replicatedstatefulset
  scope: Namespaced
  version: v1alpha1
---
# cat ceph.client.admin.keyring | tail -n 1 | awk '{print $3}' >> admin.secret
# kubectl create secret generic ceph-secret-admin --type="kubernetes.io/rbd" --from-file=admin.secret --namespace=kube-system
apiVersion: v1
data:
  admin.secret: QVFBQkt5VmF0K0FhSXhBQU5xcElISnlZY2krQ2t6UFNsNWpZQ1E9PQo=
kind: Secret
metadata:
  name: ceph-secret-admin
type: kubernetes.io/rbd
---
# kubectl create secret generic ceph-secret-user --type="kubernetes.io/rbd" --from-file=admin.secret
apiVersion: v1
data:
  admin.secret: QVFBQkt5VmF0K0FhSXhBQU5xcElISnlZY2krQ2t6UFNsNWpZQ1E9PQo=
kind: Secret
metadata:
  name: ceph-secret-user
type: kubernetes.io/rbd
---
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: my-storage-class
parameters:
  adminId: admin
  adminSecretName: ceph-secret-admin
  adminSecretNamespace: kube-system
  fsType: ext4
  imageFeatures: layering
  imageFormat: "1"
  monitors: ceph2-1:6789,ceph2-2:6789,ceph2-3:6789
  pool: rbd
  userId: admin
  userSecretName: ceph-secret-user
provisioner: kubernetes.io/rbd
reclaimPolicy: Delete
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: rss-operator
  # labels:
  #   name: rss-operator
spec:
  replicas: 1
  template:
    metadata:
      labels:
        name: rss-operator
    spec:
      containers:
      - name: rss-operator
        image: quay.io/beekhof/rss-operator:latest
        # command: [ "/usr/local/bin/rss-operator", "-alsologtostderr", "-v", "1" ]
        # imagePullPolicy: Always
        # restartPolicy: Never
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
---
apiVersion: clusterlabs.org/v1alpha1
kind: ReplicatedStatefulSet
metadata:
  # https://github.com/kubernetes/community/blob/master/contributors/devel/api-conventions.md#idempotency
  name: galera-demo
  labels:
    kind: galera
spec:
  replicas: 4
  chaosLevel: 0
  servicePorts:
  - name: galera
    protocol: TCP
    port: 3306
    targetPort: 3306
  pod:
    antiAffinity: true
    commands:
      sequence: 
        timeout: 20s
        command: ["/sequence.sh"]
      primary: 
        command: ["/start.sh"]
      seed: 
        command: ["/seed.sh"]
      status: 
        timeout: 2m
        command: ["/check.sh"]
      stop: 
        command: ["/stop.sh"]
    volumeClaimTemplates:
    - metadata:
        name: mysql-data
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: my-storage-class
        resources:
          requests:
            storage: 1Gi
    - metadata:
        name: mysql-logs
      spec:
        accessModes: [ "ReadWriteOnce" ]
        storageClassName: my-storage-class
        resources:
          requests:
            storage: 1Gi
    containers:
    - name: galera
      image: quay.io/beekhof/galera:latest
      imagePullPolicy: Always
      lifecycle:
        preStop:
            exec:
              command: ["/stop.sh"]
      ports:
      - containerPort: 3306
        name: galera
        protocol: TCP
      - containerPort: 4567
        name: galera-tcp-rep
        protocol: TCP
      - containerPort: 4567
        name: galera-udp-rep
        protocol: UDP
      - containerPort: 4568
        name: galera-state
        protocol: TCP
      - containerPort: 4444
        name: galera-snap
        protocol: TCP
        # http://galeracluster.com/documentation-webpages/firewallsettings.html
        # 3306 For MySQL client connections and State Snapshot Transfer that use the mysqldump method.
        # 4567 For Galera Cluster replication traffic, multicast replication uses both UDP transport and TCP on this port.
        # 4568 For Incremental State Transfer.
        # 4444 For all other State Snapshot Transfer.
      volumeMounts:
      - mountPath: /var/lib/mysql
        name: mysql-data
      - mountPath: /var/log
        name: mysql-logs
---
apiVersion: v1
kind: Pod
metadata:
  name: mysql
spec:
  containers:
  - image: quay.io/beekhof/galera:latest
    name: mysql
    command: [ "/run.sh" ]
