#!/usr/bin/env bash

set -o errexit
set -o nounset
set -o pipefail

# KUBECONFIG can be an empty string and so needs to be explicitly declared to avoid an unbound variable error
KUBECONFIG=${KUBECONFIG:-""}

if [ -z "${PASSES-}" ]; then
	PASSES="e2e e2eslow unit"
fi

function listPkgs() {
	go list ./cmd/... ./pkg/... ./test/... | grep -v generated
}

function listFiles() {
	# pipeline is much faster than for loop
	listPkgs | xargs -I {} find "${GOPATH}/src/{}" -name '*.go' | grep -v generated
}

function e2e_pass {
	# Run all the tests by default
	E2E_TEST_SELECTOR=${E2E_TEST_SELECTOR:-.*}

	build_flags=("-i") # cache package compilation data for faster repeated builds
	for i in {1..2}; do
		go test -alsologtostderr -v "./test/e2e/" ${build_flags[@]} -run "$E2E_TEST_SELECTOR" -timeout 30m --race \
			--kubeconfig=$KUBECONFIG --operator-image=$OPERATOR_IMAGE --namespace=${TEST_NAMESPACE}
		build_flags=("")
	done
}

function e2eslow_pass {
	E2E_TEST_SELECTOR=${E2E_TEST_SELECTOR:-.*}
	build_flags=("-i") # cache package compilation data for faster repeated builds
	for i in {1..2}; do
		go test "./test/e2e/e2eslow" ${build_flags[@]} -run "$E2E_TEST_SELECTOR" -timeout 30m --race \
			--kubeconfig=$KUBECONFIG --operator-image=$OPERATOR_IMAGE --namespace=${TEST_NAMESPACE}
		build_flags=("")
	done
}

# Note: Due to issue https://github.com/beekhof/rss-operator/issues/1252,
#   we will run only one jenkins job at a time.
function e2esh_pass {
	E2E_TEST_SELECTOR=${E2E_TEST_SELECTOR:-.*}
	build_flags=("-i") # cache package compilation data for faster repeated builds
	for i in {1..2}; do
		go test "./test/e2e/e2esh" ${build_flags[@]} -run "$E2E_TEST_SELECTOR" -timeout 30m --race \
			--kubeconfig=$KUBECONFIG --operator-image=$OPERATOR_IMAGE --namespace=${TEST_NAMESPACE}
		build_flags=("")
	done
}

function upgrade_pass {
	# Run all the tests by default
	UPGRADE_TEST_SELECTOR=${UPGRADE_TEST_SELECTOR:-.*}
	go test ./test/e2e/upgradetest/ -run "$UPGRADE_TEST_SELECTOR" --race -timeout 30m \
		--kubeconfig=$KUBECONFIG --kube-ns=$TEST_NAMESPACE \
		--old-image=$UPGRADE_FROM \
		--new-image=$UPGRADE_TO
}

function unit_pass {
	# coverage.txt is the combined coverage report consumed by codecov
	echo "mode: atomic" > coverage.txt
	TEST_PKGS=$(listPkgs | grep -v e2e)
	for pkg in $TEST_PKGS
	do
		build_flags=("-i") # cache package compilation data for faster repeated builds
		for i in {1..2}; do
			go test -v ${build_flags[@]} -race -covermode=atomic -coverprofile=profile.out $pkg
			# Expand empty array would cause "unbound variable".
			# Expand one empty string array is equal to nothing.
			build_flags=("")
		done
		if [ -f profile.out ]; then
			tail -n +2 profile.out >> coverage.txt
			rm profile.out
		fi
	done
	# Send reports to codecov, CODECOV_TOKEN env must be present in Jenkins
	(curl -s https://codecov.io/bash | bash) || true
}

for p in $PASSES
do
	${p}_pass
done

echo "=== success ==="
